class Solution {
    int[] par;
    int[] size;
    
    public int findpar(int u){
        
        if(par[u]==u) return u;
        
        return par[u]=findpar(par[u]);
        
    }
    
    public void merge(int p1,int p2){
        
        if(size[p1]>size[p2]){
            par[p2]=p1;
            size[p1]+=size[p2];
        }
        else{
            par[p1]=p2;
            size[p2]+=size[p1];
        }
        
    }
    
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n=graph.length;
        
        par=new int[n];
        
        size=new int[n];
        
        for(int i=0;i<n;i++){
            par[i]=i;
            size[i]=1;
        }
        
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                
                if(graph[i][j]==1){
                    
                    int p1=findpar(i);
                    int p2=findpar(j);
                    
                    if(p1!=p2){
                        merge(p1,p2);
                    }
                    
                }
                
            }
        }
        int[] infected=new int[n];
        
        for(int i:initial){
            int p=findpar(i);
            infected[p]++;
        }
        int ans=-1;
        int maxsize=-1;
        
        for(int e:initial){
            
            int p=findpar(e);
            
            if(infected[p]==1 && size[p]>=maxsize ){
                
                if(size[p]==maxsize){
                    ans=Math.min(ans,e);
                }
                else{
                    ans=e;
                }
                maxsize=size[p];
            }
            
        }
        
        if(ans==-1){
            int min=n+1;
            for(int e:initial){
                min=Math.min(e,min);
            }
            return min;
        }
        return ans;
    }
}