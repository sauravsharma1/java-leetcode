class Solution {
    
     int[] par;
    int[] size;
    
    public int findpar(int u){
        
        if(par[u]==u) return u;
        
        return par[u]=findpar(par[u]);
        
    }
    
    public void merge(int p1,int p2){
        
        if(size[p1]>size[p2]){
            par[p2]=p1;
            size[p1]+=size[p2];
        }
        else{
            par[p1]=p2;
            size[p2]+=size[p1];
        }
        
    }
    
    public int minMalwareSpread(int[][] graph, int[] initial) {
        
         int n=graph.length;
        
        par=new int[n];
        
        size=new int[n];
        
        for(int i=0;i<n;i++){
            par[i]=i;
            size[i]=1;
        }
        
        HashSet<Integer> set=new HashSet<>();
        
        for(int e:initial){
            set.add(e);
        }
        
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                
                if(graph[i][j]==1&&!set.contains(i)&&!set.contains(j)){
                    
                    int p1=findpar(i);
                    int p2=findpar(j);
                    
                    if(p1!=p2){
                        merge(p1,p2);
                    }
                    
                }
                
            }
        }
        
        HashMap<Integer,HashSet<Integer>> map=new HashMap<>();
        
        int[] infected=new int[n];
        
        for(int u:initial){
            
            map.put(u,new HashSet<>());
            
            for(int j=0;j<n;j++){
                if(graph[u][j]==1&&u!=j&&!set.contains(j)){
                    int p=findpar(j);
                    if(!map.get(u).contains(p)){
                        map.get(u).add(p);
                        infected[p]++;
                    }
                }
            }
            
        }
        
        int ans=-1;
        int max=-1;
        
        for(int u:initial){
            HashSet<Integer> par=map.get(u);
            
            int total=0;
            
            for(int p:par){
                if(infected[p]==1){
                    total+=size[p];
                }
            }
            
            if(total>=max){
                if(total==max){
                    ans=Math.min(ans,u);
                }
                else{
                    ans=u;
                }
                max=total;
            }
            
            }
        
        if(ans==-1){
           int min=n+1;
            for(int u:initial){
                min=Math.min(min,u);
            }
            return min;
        }
        return ans;
    }
}